enum TaskStatus {
    TODO
    IN_PROGRESS
    DONE
}

enum Role {
    USER
    ADMIN
}

type User {
    id: ID!
    username: String!
    email: String!
    firstName: String!
    lastName: String!
    fullName: String!
    role: Role!
    createdAt: String
    updatedAt: String
    assignedTasks: [Task!]!
}

type Task{
    id: ID!
    title: String!
    description: String
    completed: Boolean!
    status: TaskStatus!
    createdAt: String
    updatedAt: String
    dueDate: String
    estimationHours: Float
    assignedUsers: [User!]!
}

type TaskPage {
    content: [Task!]!
    totalElements: Int!
    totalPages: Int!
    number: Int!
    size: Int!
    numberOfElements: Int!
    first: Boolean!
    last: Boolean!
}

enum SortDirection {
    ASC
    DESC
}

enum TaskSortBy {
    TITLE
    CREATED_AT
    UPDATED_AT
    DUE_DATE
    STATUS
}

type Query {
    tasks: [Task!]!
    tasksPaginated(
        page: Int = 0
        size: Int = 10
        completed: Boolean
        titleContains: String
        sortBy: TaskSortBy
        sortDirection: SortDirection = ASC
    ): TaskPage!
    task(id: ID!): Task
    tasksByStatus(status: TaskStatus!): [Task!]!
    users: [User!]!
    user(id: ID!): User
    usersByTask(taskId: ID!): [User!]!
}

input CreateUserInput {
    username: String!
    email: String!
    firstName: String!
    lastName: String!
}

input UpdateUserInput {
    username: String
    email: String
    firstName: String
    lastName: String
}

input CreateTaskInput {
    title: String!
    description: String
    completed: Boolean
    dueDate: String
    estimationHours: Float
    assignedUserIds: [ID!]
}

input UpdateTaskInput {
    title: String
    description: String
    completed: Boolean
    status: TaskStatus
    dueDate: String
    estimationHours: Float
    assignedUserIds: [ID!]
}

type Mutation {
    createTask(input: CreateTaskInput!): Task!
    updateTask(id: ID!, input: UpdateTaskInput!): Task!
    deleteTask(id: ID!): Boolean!
    createUser(input: CreateUserInput!): User!
    updateUser(id: ID!, input: UpdateUserInput!): User!
    deleteUser(id: ID!): Boolean!
    assignUsersToTask(taskId: ID!, userIds: [ID!]!): Task!
    unassignUsersFromTask(taskId: ID!, userIds: [ID!]!): Task!
}